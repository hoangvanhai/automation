// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_msg/connection/data_channel.proto

#ifndef PROTOBUF_client_5fmsg_2fconnection_2fdata_5fchannel_2eproto__INCLUDED
#define PROTOBUF_client_5fmsg_2fconnection_2fdata_5fchannel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "client_msg/common.pb.h"
// @@protoc_insertion_point(includes)
namespace external {
namespace client {
namespace connection {
class DataChannelRequest;
class DataChannelRequestDefaultTypeInternal;
extern DataChannelRequestDefaultTypeInternal _DataChannelRequest_default_instance_;
class DataChannelResponse;
class DataChannelResponseDefaultTypeInternal;
extern DataChannelResponseDefaultTypeInternal _DataChannelResponse_default_instance_;
}  // namespace connection
}  // namespace client
}  // namespace external

namespace external {
namespace client {
namespace connection {

namespace protobuf_client_5fmsg_2fconnection_2fdata_5fchannel_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_client_5fmsg_2fconnection_2fdata_5fchannel_2eproto

// ===================================================================

class DataChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:external.client.connection.DataChannelRequest) */ {
 public:
  DataChannelRequest();
  virtual ~DataChannelRequest();

  DataChannelRequest(const DataChannelRequest& from);

  inline DataChannelRequest& operator=(const DataChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataChannelRequest(DataChannelRequest&& from) noexcept
    : DataChannelRequest() {
    *this = ::std::move(from);
  }

  inline DataChannelRequest& operator=(DataChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataChannelRequest& default_instance();

  static inline const DataChannelRequest* internal_default_instance() {
    return reinterpret_cast<const DataChannelRequest*>(
               &_DataChannelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DataChannelRequest* other);
  friend void swap(DataChannelRequest& a, DataChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataChannelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DataChannelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataChannelRequest& from);
  void MergeFrom(const DataChannelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string protocol = 1;
  void clear_protocol();
  static const int kProtocolFieldNumber = 1;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:external.client.connection.DataChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_client_5fmsg_2fconnection_2fdata_5fchannel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:external.client.connection.DataChannelResponse) */ {
 public:
  DataChannelResponse();
  virtual ~DataChannelResponse();

  DataChannelResponse(const DataChannelResponse& from);

  inline DataChannelResponse& operator=(const DataChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataChannelResponse(DataChannelResponse&& from) noexcept
    : DataChannelResponse() {
    *this = ::std::move(from);
  }

  inline DataChannelResponse& operator=(DataChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataChannelResponse& default_instance();

  static inline const DataChannelResponse* internal_default_instance() {
    return reinterpret_cast<const DataChannelResponse*>(
               &_DataChannelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DataChannelResponse* other);
  friend void swap(DataChannelResponse& a, DataChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataChannelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DataChannelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataChannelResponse& from);
  void MergeFrom(const DataChannelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .external.client.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::external::client::Error& error() const;
  ::external::client::Error* mutable_error();
  ::external::client::Error* release_error();
  void set_allocated_error(::external::client::Error* error);

  // @@protoc_insertion_point(class_scope:external.client.connection.DataChannelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::external::client::Error* error_;
  mutable int _cached_size_;
  friend struct protobuf_client_5fmsg_2fconnection_2fdata_5fchannel_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataChannelRequest

// string protocol = 1;
inline void DataChannelRequest::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataChannelRequest::protocol() const {
  // @@protoc_insertion_point(field_get:external.client.connection.DataChannelRequest.protocol)
  return protocol_.GetNoArena();
}
inline void DataChannelRequest::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:external.client.connection.DataChannelRequest.protocol)
}
#if LANG_CXX11
inline void DataChannelRequest::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:external.client.connection.DataChannelRequest.protocol)
}
#endif
inline void DataChannelRequest::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:external.client.connection.DataChannelRequest.protocol)
}
inline void DataChannelRequest::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:external.client.connection.DataChannelRequest.protocol)
}
inline ::std::string* DataChannelRequest::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:external.client.connection.DataChannelRequest.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataChannelRequest::release_protocol() {
  // @@protoc_insertion_point(field_release:external.client.connection.DataChannelRequest.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataChannelRequest::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:external.client.connection.DataChannelRequest.protocol)
}

// string address = 2;
inline void DataChannelRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataChannelRequest::address() const {
  // @@protoc_insertion_point(field_get:external.client.connection.DataChannelRequest.address)
  return address_.GetNoArena();
}
inline void DataChannelRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:external.client.connection.DataChannelRequest.address)
}
#if LANG_CXX11
inline void DataChannelRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:external.client.connection.DataChannelRequest.address)
}
#endif
inline void DataChannelRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:external.client.connection.DataChannelRequest.address)
}
inline void DataChannelRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:external.client.connection.DataChannelRequest.address)
}
inline ::std::string* DataChannelRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:external.client.connection.DataChannelRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataChannelRequest::release_address() {
  // @@protoc_insertion_point(field_release:external.client.connection.DataChannelRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataChannelRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:external.client.connection.DataChannelRequest.address)
}

// int32 port = 3;
inline void DataChannelRequest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 DataChannelRequest::port() const {
  // @@protoc_insertion_point(field_get:external.client.connection.DataChannelRequest.port)
  return port_;
}
inline void DataChannelRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:external.client.connection.DataChannelRequest.port)
}

// -------------------------------------------------------------------

// DataChannelResponse

// .external.client.Error error = 1;
inline bool DataChannelResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void DataChannelResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::external::client::Error& DataChannelResponse::error() const {
  const ::external::client::Error* p = error_;
  // @@protoc_insertion_point(field_get:external.client.connection.DataChannelResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Error*>(
      &::external::client::_Error_default_instance_);
}
inline ::external::client::Error* DataChannelResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::external::client::Error;
  }
  // @@protoc_insertion_point(field_mutable:external.client.connection.DataChannelResponse.error)
  return error_;
}
inline ::external::client::Error* DataChannelResponse::release_error() {
  // @@protoc_insertion_point(field_release:external.client.connection.DataChannelResponse.error)
  
  ::external::client::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void DataChannelResponse::set_allocated_error(::external::client::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.connection.DataChannelResponse.error)
}

// bytes key = 2;
inline void DataChannelResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataChannelResponse::key() const {
  // @@protoc_insertion_point(field_get:external.client.connection.DataChannelResponse.key)
  return key_.GetNoArena();
}
inline void DataChannelResponse::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:external.client.connection.DataChannelResponse.key)
}
#if LANG_CXX11
inline void DataChannelResponse::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:external.client.connection.DataChannelResponse.key)
}
#endif
inline void DataChannelResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:external.client.connection.DataChannelResponse.key)
}
inline void DataChannelResponse::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:external.client.connection.DataChannelResponse.key)
}
inline ::std::string* DataChannelResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:external.client.connection.DataChannelResponse.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataChannelResponse::release_key() {
  // @@protoc_insertion_point(field_release:external.client.connection.DataChannelResponse.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataChannelResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:external.client.connection.DataChannelResponse.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace connection
}  // namespace client
}  // namespace external

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5fmsg_2fconnection_2fdata_5fchannel_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_msg/common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_msg/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace external {
namespace client {
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
} _Error_default_instance_;
class VersionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Version>
     _instance;
} _Version_default_instance_;
class LocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Location>
     _instance;
} _Location_default_instance_;
class Sensor_ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sensor_Error>
     _instance;
} _Sensor_Error_default_instance_;
class SensorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sensor>
     _instance;
} _Sensor_default_instance_;
class Signal_GeolocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Signal_Geolocation>
     _instance;
} _Signal_Geolocation_default_instance_;
class SignalDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Signal>
     _instance;
} _Signal_default_instance_;

namespace protobuf_client_5fmsg_2fcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, major_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, minor_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, build_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, longitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor_Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor_Error, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor_Error, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, actived_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, software_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, hardware_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal_Geolocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal_Geolocation, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal_Geolocation, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal_Geolocation, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal_Geolocation, hypebol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal_Geolocation, offset_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, geolocation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, automation_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Error)},
  { 7, -1, sizeof(Version)},
  { 15, -1, sizeof(Location)},
  { 22, -1, sizeof(Sensor_Error)},
  { 29, -1, sizeof(Sensor)},
  { 44, -1, sizeof(Signal_Geolocation)},
  { 54, -1, sizeof(Signal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Version_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sensor_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signal_Geolocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signal_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "client_msg/common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_Version_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Version_default_instance_);_Location_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Location_default_instance_);_Sensor_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sensor_Error_default_instance_);_Sensor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sensor_default_instance_);_Signal_Geolocation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Signal_Geolocation_default_instance_);_Signal_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Signal_default_instance_);_Sensor_default_instance_._instance.get_mutable()->software_version_ = const_cast< ::external::client::Version*>(
      ::external::client::Version::internal_default_instance());
  _Sensor_default_instance_._instance.get_mutable()->hardware_version_ = const_cast< ::external::client::Version*>(
      ::external::client::Version::internal_default_instance());
  _Sensor_default_instance_._instance.get_mutable()->location_ = const_cast< ::external::client::Location*>(
      ::external::client::Location::internal_default_instance());
  _Signal_Geolocation_default_instance_._instance.get_mutable()->location_ = const_cast< ::external::client::Location*>(
      ::external::client::Location::internal_default_instance());
  _Signal_default_instance_._instance.get_mutable()->geolocation_ = const_cast< ::external::client::Signal_Geolocation*>(
      ::external::client::Signal_Geolocation::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027client_msg/common.proto\022\017external.clie"
      "nt\"&\n\005Error\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001"
      "(\t\"K\n\007Version\022\024\n\014major_number\030\001 \001(\r\022\024\n\014m"
      "inor_number\030\002 \001(\r\022\024\n\014build_number\030\003 \001(\r\""
      "/\n\010Location\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitu"
      "de\030\002 \001(\001\"\350\003\n\006Sensor\022\n\n\002id\030\001 \001(\004\022\017\n\007addre"
      "ss\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\017\n\007actived\030\004 \001(\010\022"
      "\021\n\tconnected\030\005 \001(\010\0222\n\020software_version\030\006"
      " \001(\0132\030.external.client.Version\0222\n\020hardwa"
      "re_version\030\007 \001(\0132\030.external.client.Versi"
      "on\022+\n\010location\030\010 \001(\0132\031.external.client.L"
      "ocation\022*\n\004type\030\t \001(\0162\034.external.client."
      "Sensor.Type\022,\n\005error\030\n \003(\0132\035.external.cl"
      "ient.Sensor.Error\032\200\001\n\005Error\0220\n\004type\030\001 \001("
      "\0162\".external.client.Sensor.Error.Type\022\017\n"
      "\007message\030\002 \001(\t\"4\n\004Type\022\010\n\004NONE\020\000\022\014\n\010LOCA"
      "TION\020\001\022\007\n\003PPS\020\002\022\013\n\007MISSION\020\003\"\035\n\004Type\022\007\n\003"
      "TCP\020\000\022\014\n\010ETHERNET\020\001\"\222\005\n\006Signal\022\022\n\nproper"
      "ties\030\001 \001(\004\022\n\n\002id\030\002 \001(\004\022\021\n\tfrequency\030\003 \001("
      "\004\022\021\n\tbandwidth\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001(\004\022"
      "\020\n\010duration\030\006 \001(\004\022\r\n\005power\030\007 \001(\002\0228\n\013geol"
      "ocation\030\010 \001(\0132#.external.client.Signal.G"
      "eolocation\022*\n\004type\030\t \001(\0162\034.external.clie"
      "nt.Signal.Type\022\022\n\nautomation\030\n \001(\004\032\270\001\n\013G"
      "eolocation\022+\n\010location\030\001 \001(\0132\031.external."
      "client.Location\022\'\n\006sensor\030\002 \003(\0132\027.extern"
      "al.client.Sensor\022\022\n\nconfidence\030\003 \003(\002\022*\n\007"
      "hypebol\030\004 \003(\0132\031.external.client.Location"
      "\022\023\n\013offset_time\030\005 \003(\004\"\\\n\004Type\022\r\n\tUNDEFIN"
      "ED\020\000\022\r\n\tFM_NARROW\020\001\022\013\n\007FM_WIDE\020\002\022\006\n\002AM\020\003"
      "\022\007\n\003FSK\020\004\022\007\n\003USB\020\005\022\007\n\003LSB\020\006\022\006\n\002CW\020\007\"{\n\010P"
      "roperty\022\r\n\tFREQUENCY\020\000\022\r\n\tBANDWIDTH\020\001\022\r\n"
      "\tTIMESTAMP\020\002\022\014\n\010DURATION\020\003\022\t\n\005POWER\020\004\022\017\n"
      "\013GEOLOCATION\020\005\022\010\n\004TYPE\020\006\022\016\n\nAUTOMATION\020\007"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_msg/common.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_client_5fmsg_2fcommon_2eproto

const ::google::protobuf::EnumDescriptor* Sensor_Error_Type_descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_enum_descriptors[0];
}
bool Sensor_Error_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sensor_Error_Type Sensor_Error::NONE;
const Sensor_Error_Type Sensor_Error::LOCATION;
const Sensor_Error_Type Sensor_Error::PPS;
const Sensor_Error_Type Sensor_Error::MISSION;
const Sensor_Error_Type Sensor_Error::Type_MIN;
const Sensor_Error_Type Sensor_Error::Type_MAX;
const int Sensor_Error::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sensor_Type_descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_enum_descriptors[1];
}
bool Sensor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sensor_Type Sensor::TCP;
const Sensor_Type Sensor::ETHERNET;
const Sensor_Type Sensor::Type_MIN;
const Sensor_Type Sensor::Type_MAX;
const int Sensor::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_enum_descriptors[2];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::UNDEFINED;
const Signal_Type Signal::FM_NARROW;
const Signal_Type Signal::FM_WIDE;
const Signal_Type Signal::AM;
const Signal_Type Signal::FSK;
const Signal_Type Signal::USB;
const Signal_Type Signal::LSB;
const Signal_Type Signal::CW;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_Property_descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_enum_descriptors[3];
}
bool Signal_Property_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Property Signal::FREQUENCY;
const Signal_Property Signal::BANDWIDTH;
const Signal_Property Signal::TIMESTAMP;
const Signal_Property Signal::DURATION;
const Signal_Property Signal::POWER;
const Signal_Property Signal::GEOLOCATION;
const Signal_Property Signal::TYPE;
const Signal_Property Signal::AUTOMATION;
const Signal_Property Signal::Property_MIN;
const Signal_Property Signal::Property_MAX;
const int Signal::Property_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:external.client.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:external.client.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:external.client.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:external.client.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:external.client.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "external.client.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:external.client.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:external.client.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:external.client.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "external.client.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:external.client.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:external.client.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "external.client.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:external.client.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:external.client.Error)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:external.client.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:external.client.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:external.client.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:external.client.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:external.client.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:external.client.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// int32 code = 1;
void Error::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:external.client.Error.code)
  return code_;
}
void Error::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:external.client.Error.code)
}

// string message = 2;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:external.client.Error.message)
  return message_.GetNoArena();
}
void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:external.client.Error.message)
}
#if LANG_CXX11
void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:external.client.Error.message)
}
#endif
void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:external.client.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:external.client.Error.message)
}
::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:external.client.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:external.client.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:external.client.Error.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kMajorNumberFieldNumber;
const int Version::kMinorNumberFieldNumber;
const int Version::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:external.client.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_number_, &from.major_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&major_number_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:external.client.Version)
}

void Version::SharedCtor() {
  ::memset(&major_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&major_number_)) + sizeof(build_number_));
  _cached_size_ = 0;
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:external.client.Version)
  SharedDtor();
}

void Version::SharedDtor() {
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Version& Version::default_instance() {
  protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Version* Version::New(::google::protobuf::Arena* arena) const {
  Version* n = new Version;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:external.client.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&major_number_)) + sizeof(build_number_));
  _internal_metadata_.Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:external.client.Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 major_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minor_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 build_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:external.client.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:external.client.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:external.client.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major_number(), output);
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor_number(), output);
  }

  // uint32 build_number = 3;
  if (this->build_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->build_number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:external.client.Version)
}

::google::protobuf::uint8* Version::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:external.client.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major_number(), target);
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor_number(), target);
  }

  // uint32 build_number = 3;
  if (this->build_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->build_number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:external.client.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:external.client.Version)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major_number());
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor_number());
  }

  // uint32 build_number = 3;
  if (this->build_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->build_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:external.client.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Version>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:external.client.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:external.client.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:external.client.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major_number() != 0) {
    set_major_number(from.major_number());
  }
  if (from.minor_number() != 0) {
    set_minor_number(from.minor_number());
  }
  if (from.build_number() != 0) {
    set_build_number(from.build_number());
  }
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:external.client.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:external.client.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  using std::swap;
  swap(major_number_, other->major_number_);
  swap(minor_number_, other->minor_number_);
  swap(build_number_, other->build_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Version

// uint32 major_number = 1;
void Version::clear_major_number() {
  major_number_ = 0u;
}
::google::protobuf::uint32 Version::major_number() const {
  // @@protoc_insertion_point(field_get:external.client.Version.major_number)
  return major_number_;
}
void Version::set_major_number(::google::protobuf::uint32 value) {
  
  major_number_ = value;
  // @@protoc_insertion_point(field_set:external.client.Version.major_number)
}

// uint32 minor_number = 2;
void Version::clear_minor_number() {
  minor_number_ = 0u;
}
::google::protobuf::uint32 Version::minor_number() const {
  // @@protoc_insertion_point(field_get:external.client.Version.minor_number)
  return minor_number_;
}
void Version::set_minor_number(::google::protobuf::uint32 value) {
  
  minor_number_ = value;
  // @@protoc_insertion_point(field_set:external.client.Version.minor_number)
}

// uint32 build_number = 3;
void Version::clear_build_number() {
  build_number_ = 0u;
}
::google::protobuf::uint32 Version::build_number() const {
  // @@protoc_insertion_point(field_get:external.client.Version.build_number)
  return build_number_;
}
void Version::set_build_number(::google::protobuf::uint32 value) {
  
  build_number_ = value;
  // @@protoc_insertion_point(field_set:external.client.Version.build_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kLatitudeFieldNumber;
const int Location::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:external.client.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:external.client.Location)
}

void Location::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:external.client.Location)
  SharedDtor();
}

void Location::SharedDtor() {
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Location& Location::default_instance() {
  protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:external.client.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:external.client.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:external.client.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:external.client.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:external.client.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:external.client.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:external.client.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:external.client.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:external.client.Location)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:external.client.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:external.client.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:external.client.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:external.client.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:external.client.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:external.client.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// double latitude = 1;
void Location::clear_latitude() {
  latitude_ = 0;
}
double Location::latitude() const {
  // @@protoc_insertion_point(field_get:external.client.Location.latitude)
  return latitude_;
}
void Location::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:external.client.Location.latitude)
}

// double longitude = 2;
void Location::clear_longitude() {
  longitude_ = 0;
}
double Location::longitude() const {
  // @@protoc_insertion_point(field_get:external.client.Location.longitude)
  return longitude_;
}
void Location::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:external.client.Location.longitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor_Error::kTypeFieldNumber;
const int Sensor_Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor_Error::Sensor_Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:external.client.Sensor.Error)
}
Sensor_Error::Sensor_Error(const Sensor_Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:external.client.Sensor.Error)
}

void Sensor_Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Sensor_Error::~Sensor_Error() {
  // @@protoc_insertion_point(destructor:external.client.Sensor.Error)
  SharedDtor();
}

void Sensor_Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sensor_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sensor_Error::descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor_Error& Sensor_Error::default_instance() {
  protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sensor_Error* Sensor_Error::New(::google::protobuf::Arena* arena) const {
  Sensor_Error* n = new Sensor_Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sensor_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:external.client.Sensor.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Sensor_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:external.client.Sensor.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .external.client.Sensor.Error.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::external::client::Sensor_Error_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "external.client.Sensor.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:external.client.Sensor.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:external.client.Sensor.Error)
  return false;
#undef DO_
}

void Sensor_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:external.client.Sensor.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .external.client.Sensor.Error.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "external.client.Sensor.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:external.client.Sensor.Error)
}

::google::protobuf::uint8* Sensor_Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:external.client.Sensor.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .external.client.Sensor.Error.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "external.client.Sensor.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:external.client.Sensor.Error)
  return target;
}

size_t Sensor_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:external.client.Sensor.Error)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .external.client.Sensor.Error.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sensor_Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:external.client.Sensor.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor_Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor_Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:external.client.Sensor.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:external.client.Sensor.Error)
    MergeFrom(*source);
  }
}

void Sensor_Error::MergeFrom(const Sensor_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:external.client.Sensor.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Sensor_Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:external.client.Sensor.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor_Error::CopyFrom(const Sensor_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:external.client.Sensor.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor_Error::IsInitialized() const {
  return true;
}

void Sensor_Error::Swap(Sensor_Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sensor_Error::InternalSwap(Sensor_Error* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sensor_Error::GetMetadata() const {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sensor_Error

// .external.client.Sensor.Error.Type type = 1;
void Sensor_Error::clear_type() {
  type_ = 0;
}
::external::client::Sensor_Error_Type Sensor_Error::type() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.Error.type)
  return static_cast< ::external::client::Sensor_Error_Type >(type_);
}
void Sensor_Error::set_type(::external::client::Sensor_Error_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:external.client.Sensor.Error.type)
}

// string message = 2;
void Sensor_Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sensor_Error::message() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.Error.message)
  return message_.GetNoArena();
}
void Sensor_Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:external.client.Sensor.Error.message)
}
#if LANG_CXX11
void Sensor_Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:external.client.Sensor.Error.message)
}
#endif
void Sensor_Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:external.client.Sensor.Error.message)
}
void Sensor_Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:external.client.Sensor.Error.message)
}
::std::string* Sensor_Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:external.client.Sensor.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sensor_Error::release_message() {
  // @@protoc_insertion_point(field_release:external.client.Sensor.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sensor_Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:external.client.Sensor.Error.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kIdFieldNumber;
const int Sensor::kAddressFieldNumber;
const int Sensor::kPortFieldNumber;
const int Sensor::kActivedFieldNumber;
const int Sensor::kConnectedFieldNumber;
const int Sensor::kSoftwareVersionFieldNumber;
const int Sensor::kHardwareVersionFieldNumber;
const int Sensor::kLocationFieldNumber;
const int Sensor::kTypeFieldNumber;
const int Sensor::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:external.client.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      error_(from.error_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_software_version()) {
    software_version_ = new ::external::client::Version(*from.software_version_);
  } else {
    software_version_ = NULL;
  }
  if (from.has_hardware_version()) {
    hardware_version_ = new ::external::client::Version(*from.hardware_version_);
  } else {
    hardware_version_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::external::client::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:external.client.Sensor)
}

void Sensor::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&software_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&software_version_)) + sizeof(type_));
  _cached_size_ = 0;
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:external.client.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete software_version_;
  if (this != internal_default_instance()) delete hardware_version_;
  if (this != internal_default_instance()) delete location_;
}

void Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor& Sensor::default_instance() {
  protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sensor* Sensor::New(::google::protobuf::Arena* arena) const {
  Sensor* n = new Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:external.client.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && software_version_ != NULL) {
    delete software_version_;
  }
  software_version_ = NULL;
  if (GetArenaNoVirtual() == NULL && hardware_version_ != NULL) {
    delete hardware_version_;
  }
  hardware_version_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:external.client.Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "external.client.Sensor.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool actived = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &actived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connected = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .external.client.Version software_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_software_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .external.client.Version hardware_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .external.client.Location location = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .external.client.Sensor.Type type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::external::client::Sensor_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .external.client.Sensor.Error error = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:external.client.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:external.client.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:external.client.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "external.client.Sensor.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // bool actived = 4;
  if (this->actived() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->actived(), output);
  }

  // bool connected = 5;
  if (this->connected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->connected(), output);
  }

  // .external.client.Version software_version = 6;
  if (this->has_software_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->software_version_, output);
  }

  // .external.client.Version hardware_version = 7;
  if (this->has_hardware_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->hardware_version_, output);
  }

  // .external.client.Location location = 8;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->location_, output);
  }

  // .external.client.Sensor.Type type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // repeated .external.client.Sensor.Error error = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->error_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->error(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:external.client.Sensor)
}

::google::protobuf::uint8* Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:external.client.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "external.client.Sensor.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // bool actived = 4;
  if (this->actived() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->actived(), target);
  }

  // bool connected = 5;
  if (this->connected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->connected(), target);
  }

  // .external.client.Version software_version = 6;
  if (this->has_software_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->software_version_, deterministic, target);
  }

  // .external.client.Version hardware_version = 7;
  if (this->has_hardware_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->hardware_version_, deterministic, target);
  }

  // .external.client.Location location = 8;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->location_, deterministic, target);
  }

  // .external.client.Sensor.Type type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // repeated .external.client.Sensor.Error error = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->error_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->error(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:external.client.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:external.client.Sensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .external.client.Sensor.Error error = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->error_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error(static_cast<int>(i)));
    }
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .external.client.Version software_version = 6;
  if (this->has_software_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->software_version_);
  }

  // .external.client.Version hardware_version = 7;
  if (this->has_hardware_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hardware_version_);
  }

  // .external.client.Location location = 8;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // bool actived = 4;
  if (this->actived() != 0) {
    total_size += 1 + 1;
  }

  // bool connected = 5;
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  // .external.client.Sensor.Type type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:external.client.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:external.client.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:external.client.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:external.client.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_.MergeFrom(from.error_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_software_version()) {
    mutable_software_version()->::external::client::Version::MergeFrom(from.software_version());
  }
  if (from.has_hardware_version()) {
    mutable_hardware_version()->::external::client::Version::MergeFrom(from.hardware_version());
  }
  if (from.has_location()) {
    mutable_location()->::external::client::Location::MergeFrom(from.location());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.actived() != 0) {
    set_actived(from.actived());
  }
  if (from.connected() != 0) {
    set_connected(from.connected());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:external.client.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:external.client.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  error_.InternalSwap(&other->error_);
  address_.Swap(&other->address_);
  swap(software_version_, other->software_version_);
  swap(hardware_version_, other->hardware_version_);
  swap(location_, other->location_);
  swap(id_, other->id_);
  swap(port_, other->port_);
  swap(actived_, other->actived_);
  swap(connected_, other->connected_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sensor

// uint64 id = 1;
void Sensor::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Sensor::id() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.id)
  return id_;
}
void Sensor::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:external.client.Sensor.id)
}

// string address = 2;
void Sensor::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sensor::address() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.address)
  return address_.GetNoArena();
}
void Sensor::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:external.client.Sensor.address)
}
#if LANG_CXX11
void Sensor::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:external.client.Sensor.address)
}
#endif
void Sensor::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:external.client.Sensor.address)
}
void Sensor::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:external.client.Sensor.address)
}
::std::string* Sensor::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:external.client.Sensor.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sensor::release_address() {
  // @@protoc_insertion_point(field_release:external.client.Sensor.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sensor::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:external.client.Sensor.address)
}

// int32 port = 3;
void Sensor::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 Sensor::port() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.port)
  return port_;
}
void Sensor::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:external.client.Sensor.port)
}

// bool actived = 4;
void Sensor::clear_actived() {
  actived_ = false;
}
bool Sensor::actived() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.actived)
  return actived_;
}
void Sensor::set_actived(bool value) {
  
  actived_ = value;
  // @@protoc_insertion_point(field_set:external.client.Sensor.actived)
}

// bool connected = 5;
void Sensor::clear_connected() {
  connected_ = false;
}
bool Sensor::connected() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.connected)
  return connected_;
}
void Sensor::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:external.client.Sensor.connected)
}

// .external.client.Version software_version = 6;
bool Sensor::has_software_version() const {
  return this != internal_default_instance() && software_version_ != NULL;
}
void Sensor::clear_software_version() {
  if (GetArenaNoVirtual() == NULL && software_version_ != NULL) delete software_version_;
  software_version_ = NULL;
}
const ::external::client::Version& Sensor::software_version() const {
  const ::external::client::Version* p = software_version_;
  // @@protoc_insertion_point(field_get:external.client.Sensor.software_version)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Version*>(
      &::external::client::_Version_default_instance_);
}
::external::client::Version* Sensor::mutable_software_version() {
  
  if (software_version_ == NULL) {
    software_version_ = new ::external::client::Version;
  }
  // @@protoc_insertion_point(field_mutable:external.client.Sensor.software_version)
  return software_version_;
}
::external::client::Version* Sensor::release_software_version() {
  // @@protoc_insertion_point(field_release:external.client.Sensor.software_version)
  
  ::external::client::Version* temp = software_version_;
  software_version_ = NULL;
  return temp;
}
void Sensor::set_allocated_software_version(::external::client::Version* software_version) {
  delete software_version_;
  software_version_ = software_version;
  if (software_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.Sensor.software_version)
}

// .external.client.Version hardware_version = 7;
bool Sensor::has_hardware_version() const {
  return this != internal_default_instance() && hardware_version_ != NULL;
}
void Sensor::clear_hardware_version() {
  if (GetArenaNoVirtual() == NULL && hardware_version_ != NULL) delete hardware_version_;
  hardware_version_ = NULL;
}
const ::external::client::Version& Sensor::hardware_version() const {
  const ::external::client::Version* p = hardware_version_;
  // @@protoc_insertion_point(field_get:external.client.Sensor.hardware_version)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Version*>(
      &::external::client::_Version_default_instance_);
}
::external::client::Version* Sensor::mutable_hardware_version() {
  
  if (hardware_version_ == NULL) {
    hardware_version_ = new ::external::client::Version;
  }
  // @@protoc_insertion_point(field_mutable:external.client.Sensor.hardware_version)
  return hardware_version_;
}
::external::client::Version* Sensor::release_hardware_version() {
  // @@protoc_insertion_point(field_release:external.client.Sensor.hardware_version)
  
  ::external::client::Version* temp = hardware_version_;
  hardware_version_ = NULL;
  return temp;
}
void Sensor::set_allocated_hardware_version(::external::client::Version* hardware_version) {
  delete hardware_version_;
  hardware_version_ = hardware_version;
  if (hardware_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.Sensor.hardware_version)
}

// .external.client.Location location = 8;
bool Sensor::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Sensor::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::external::client::Location& Sensor::location() const {
  const ::external::client::Location* p = location_;
  // @@protoc_insertion_point(field_get:external.client.Sensor.location)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Location*>(
      &::external::client::_Location_default_instance_);
}
::external::client::Location* Sensor::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::external::client::Location;
  }
  // @@protoc_insertion_point(field_mutable:external.client.Sensor.location)
  return location_;
}
::external::client::Location* Sensor::release_location() {
  // @@protoc_insertion_point(field_release:external.client.Sensor.location)
  
  ::external::client::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void Sensor::set_allocated_location(::external::client::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.Sensor.location)
}

// .external.client.Sensor.Type type = 9;
void Sensor::clear_type() {
  type_ = 0;
}
::external::client::Sensor_Type Sensor::type() const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.type)
  return static_cast< ::external::client::Sensor_Type >(type_);
}
void Sensor::set_type(::external::client::Sensor_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:external.client.Sensor.type)
}

// repeated .external.client.Sensor.Error error = 10;
int Sensor::error_size() const {
  return error_.size();
}
void Sensor::clear_error() {
  error_.Clear();
}
const ::external::client::Sensor_Error& Sensor::error(int index) const {
  // @@protoc_insertion_point(field_get:external.client.Sensor.error)
  return error_.Get(index);
}
::external::client::Sensor_Error* Sensor::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:external.client.Sensor.error)
  return error_.Mutable(index);
}
::external::client::Sensor_Error* Sensor::add_error() {
  // @@protoc_insertion_point(field_add:external.client.Sensor.error)
  return error_.Add();
}
::google::protobuf::RepeatedPtrField< ::external::client::Sensor_Error >*
Sensor::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:external.client.Sensor.error)
  return &error_;
}
const ::google::protobuf::RepeatedPtrField< ::external::client::Sensor_Error >&
Sensor::error() const {
  // @@protoc_insertion_point(field_list:external.client.Sensor.error)
  return error_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_Geolocation::kLocationFieldNumber;
const int Signal_Geolocation::kSensorFieldNumber;
const int Signal_Geolocation::kConfidenceFieldNumber;
const int Signal_Geolocation::kHypebolFieldNumber;
const int Signal_Geolocation::kOffsetTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_Geolocation::Signal_Geolocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:external.client.Signal.Geolocation)
}
Signal_Geolocation::Signal_Geolocation(const Signal_Geolocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_(from.sensor_),
      confidence_(from.confidence_),
      hypebol_(from.hypebol_),
      offset_time_(from.offset_time_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::external::client::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:external.client.Signal.Geolocation)
}

void Signal_Geolocation::SharedCtor() {
  location_ = NULL;
  _cached_size_ = 0;
}

Signal_Geolocation::~Signal_Geolocation() {
  // @@protoc_insertion_point(destructor:external.client.Signal.Geolocation)
  SharedDtor();
}

void Signal_Geolocation::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void Signal_Geolocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal_Geolocation::descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal_Geolocation& Signal_Geolocation::default_instance() {
  protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signal_Geolocation* Signal_Geolocation::New(::google::protobuf::Arena* arena) const {
  Signal_Geolocation* n = new Signal_Geolocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal_Geolocation::Clear() {
// @@protoc_insertion_point(message_clear_start:external.client.Signal.Geolocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_.Clear();
  confidence_.Clear();
  hypebol_.Clear();
  offset_time_.Clear();
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  _internal_metadata_.Clear();
}

bool Signal_Geolocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:external.client.Signal.Geolocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .external.client.Location location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .external.client.Sensor sensor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_confidence())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_confidence())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .external.client.Location hypebol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hypebol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 offset_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_offset_time())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_offset_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:external.client.Signal.Geolocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:external.client.Signal.Geolocation)
  return false;
#undef DO_
}

void Signal_Geolocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:external.client.Signal.Geolocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .external.client.Location location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // repeated .external.client.Sensor sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensor(static_cast<int>(i)), output);
  }

  // repeated float confidence = 3;
  if (this->confidence_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _confidence_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->confidence().data(), this->confidence_size(), output);
  }

  // repeated .external.client.Location hypebol = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hypebol_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hypebol(static_cast<int>(i)), output);
  }

  // repeated uint64 offset_time = 5;
  if (this->offset_time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _offset_time_cached_byte_size_));
  }
  for (int i = 0, n = this->offset_time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->offset_time(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:external.client.Signal.Geolocation)
}

::google::protobuf::uint8* Signal_Geolocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:external.client.Signal.Geolocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .external.client.Location location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, deterministic, target);
  }

  // repeated .external.client.Sensor sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sensor(static_cast<int>(i)), deterministic, target);
  }

  // repeated float confidence = 3;
  if (this->confidence_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _confidence_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->confidence_, target);
  }

  // repeated .external.client.Location hypebol = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hypebol_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->hypebol(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint64 offset_time = 5;
  if (this->offset_time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _offset_time_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->offset_time_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:external.client.Signal.Geolocation)
  return target;
}

size_t Signal_Geolocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:external.client.Signal.Geolocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .external.client.Sensor sensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor(static_cast<int>(i)));
    }
  }

  // repeated float confidence = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->confidence_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _confidence_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .external.client.Location hypebol = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->hypebol_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hypebol(static_cast<int>(i)));
    }
  }

  // repeated uint64 offset_time = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->offset_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _offset_time_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .external.client.Location location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal_Geolocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:external.client.Signal.Geolocation)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Geolocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal_Geolocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:external.client.Signal.Geolocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:external.client.Signal.Geolocation)
    MergeFrom(*source);
  }
}

void Signal_Geolocation::MergeFrom(const Signal_Geolocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:external.client.Signal.Geolocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_.MergeFrom(from.sensor_);
  confidence_.MergeFrom(from.confidence_);
  hypebol_.MergeFrom(from.hypebol_);
  offset_time_.MergeFrom(from.offset_time_);
  if (from.has_location()) {
    mutable_location()->::external::client::Location::MergeFrom(from.location());
  }
}

void Signal_Geolocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:external.client.Signal.Geolocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Geolocation::CopyFrom(const Signal_Geolocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:external.client.Signal.Geolocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Geolocation::IsInitialized() const {
  return true;
}

void Signal_Geolocation::Swap(Signal_Geolocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_Geolocation::InternalSwap(Signal_Geolocation* other) {
  using std::swap;
  sensor_.InternalSwap(&other->sensor_);
  confidence_.InternalSwap(&other->confidence_);
  hypebol_.InternalSwap(&other->hypebol_);
  offset_time_.InternalSwap(&other->offset_time_);
  swap(location_, other->location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal_Geolocation::GetMetadata() const {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal_Geolocation

// .external.client.Location location = 1;
bool Signal_Geolocation::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Signal_Geolocation::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::external::client::Location& Signal_Geolocation::location() const {
  const ::external::client::Location* p = location_;
  // @@protoc_insertion_point(field_get:external.client.Signal.Geolocation.location)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Location*>(
      &::external::client::_Location_default_instance_);
}
::external::client::Location* Signal_Geolocation::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::external::client::Location;
  }
  // @@protoc_insertion_point(field_mutable:external.client.Signal.Geolocation.location)
  return location_;
}
::external::client::Location* Signal_Geolocation::release_location() {
  // @@protoc_insertion_point(field_release:external.client.Signal.Geolocation.location)
  
  ::external::client::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void Signal_Geolocation::set_allocated_location(::external::client::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.Signal.Geolocation.location)
}

// repeated .external.client.Sensor sensor = 2;
int Signal_Geolocation::sensor_size() const {
  return sensor_.size();
}
void Signal_Geolocation::clear_sensor() {
  sensor_.Clear();
}
const ::external::client::Sensor& Signal_Geolocation::sensor(int index) const {
  // @@protoc_insertion_point(field_get:external.client.Signal.Geolocation.sensor)
  return sensor_.Get(index);
}
::external::client::Sensor* Signal_Geolocation::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:external.client.Signal.Geolocation.sensor)
  return sensor_.Mutable(index);
}
::external::client::Sensor* Signal_Geolocation::add_sensor() {
  // @@protoc_insertion_point(field_add:external.client.Signal.Geolocation.sensor)
  return sensor_.Add();
}
::google::protobuf::RepeatedPtrField< ::external::client::Sensor >*
Signal_Geolocation::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:external.client.Signal.Geolocation.sensor)
  return &sensor_;
}
const ::google::protobuf::RepeatedPtrField< ::external::client::Sensor >&
Signal_Geolocation::sensor() const {
  // @@protoc_insertion_point(field_list:external.client.Signal.Geolocation.sensor)
  return sensor_;
}

// repeated float confidence = 3;
int Signal_Geolocation::confidence_size() const {
  return confidence_.size();
}
void Signal_Geolocation::clear_confidence() {
  confidence_.Clear();
}
float Signal_Geolocation::confidence(int index) const {
  // @@protoc_insertion_point(field_get:external.client.Signal.Geolocation.confidence)
  return confidence_.Get(index);
}
void Signal_Geolocation::set_confidence(int index, float value) {
  confidence_.Set(index, value);
  // @@protoc_insertion_point(field_set:external.client.Signal.Geolocation.confidence)
}
void Signal_Geolocation::add_confidence(float value) {
  confidence_.Add(value);
  // @@protoc_insertion_point(field_add:external.client.Signal.Geolocation.confidence)
}
const ::google::protobuf::RepeatedField< float >&
Signal_Geolocation::confidence() const {
  // @@protoc_insertion_point(field_list:external.client.Signal.Geolocation.confidence)
  return confidence_;
}
::google::protobuf::RepeatedField< float >*
Signal_Geolocation::mutable_confidence() {
  // @@protoc_insertion_point(field_mutable_list:external.client.Signal.Geolocation.confidence)
  return &confidence_;
}

// repeated .external.client.Location hypebol = 4;
int Signal_Geolocation::hypebol_size() const {
  return hypebol_.size();
}
void Signal_Geolocation::clear_hypebol() {
  hypebol_.Clear();
}
const ::external::client::Location& Signal_Geolocation::hypebol(int index) const {
  // @@protoc_insertion_point(field_get:external.client.Signal.Geolocation.hypebol)
  return hypebol_.Get(index);
}
::external::client::Location* Signal_Geolocation::mutable_hypebol(int index) {
  // @@protoc_insertion_point(field_mutable:external.client.Signal.Geolocation.hypebol)
  return hypebol_.Mutable(index);
}
::external::client::Location* Signal_Geolocation::add_hypebol() {
  // @@protoc_insertion_point(field_add:external.client.Signal.Geolocation.hypebol)
  return hypebol_.Add();
}
::google::protobuf::RepeatedPtrField< ::external::client::Location >*
Signal_Geolocation::mutable_hypebol() {
  // @@protoc_insertion_point(field_mutable_list:external.client.Signal.Geolocation.hypebol)
  return &hypebol_;
}
const ::google::protobuf::RepeatedPtrField< ::external::client::Location >&
Signal_Geolocation::hypebol() const {
  // @@protoc_insertion_point(field_list:external.client.Signal.Geolocation.hypebol)
  return hypebol_;
}

// repeated uint64 offset_time = 5;
int Signal_Geolocation::offset_time_size() const {
  return offset_time_.size();
}
void Signal_Geolocation::clear_offset_time() {
  offset_time_.Clear();
}
::google::protobuf::uint64 Signal_Geolocation::offset_time(int index) const {
  // @@protoc_insertion_point(field_get:external.client.Signal.Geolocation.offset_time)
  return offset_time_.Get(index);
}
void Signal_Geolocation::set_offset_time(int index, ::google::protobuf::uint64 value) {
  offset_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:external.client.Signal.Geolocation.offset_time)
}
void Signal_Geolocation::add_offset_time(::google::protobuf::uint64 value) {
  offset_time_.Add(value);
  // @@protoc_insertion_point(field_add:external.client.Signal.Geolocation.offset_time)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Signal_Geolocation::offset_time() const {
  // @@protoc_insertion_point(field_list:external.client.Signal.Geolocation.offset_time)
  return offset_time_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Signal_Geolocation::mutable_offset_time() {
  // @@protoc_insertion_point(field_mutable_list:external.client.Signal.Geolocation.offset_time)
  return &offset_time_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kPropertiesFieldNumber;
const int Signal::kIdFieldNumber;
const int Signal::kFrequencyFieldNumber;
const int Signal::kBandwidthFieldNumber;
const int Signal::kTimestampFieldNumber;
const int Signal::kDurationFieldNumber;
const int Signal::kPowerFieldNumber;
const int Signal::kGeolocationFieldNumber;
const int Signal::kTypeFieldNumber;
const int Signal::kAutomationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:external.client.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geolocation()) {
    geolocation_ = new ::external::client::Signal_Geolocation(*from.geolocation_);
  } else {
    geolocation_ = NULL;
  }
  ::memcpy(&properties_, &from.properties_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&properties_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:external.client.Signal)
}

void Signal::SharedCtor() {
  ::memset(&geolocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&geolocation_)) + sizeof(type_));
  _cached_size_ = 0;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:external.client.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != internal_default_instance()) delete geolocation_;
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  protobuf_client_5fmsg_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signal* Signal::New(::google::protobuf::Arena* arena) const {
  Signal* n = new Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:external.client.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && geolocation_ != NULL) {
    delete geolocation_;
  }
  geolocation_ = NULL;
  ::memset(&properties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&properties_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:external.client.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 properties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &properties_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bandwidth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float power = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .external.client.Signal.Geolocation geolocation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geolocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .external.client.Signal.Type type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::external::client::Signal_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 automation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &automation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:external.client.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:external.client.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:external.client.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 properties = 1;
  if (this->properties() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->properties(), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // uint64 frequency = 3;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->frequency(), output);
  }

  // uint32 bandwidth = 4;
  if (this->bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bandwidth(), output);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // uint64 duration = 6;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->duration(), output);
  }

  // float power = 7;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->power(), output);
  }

  // .external.client.Signal.Geolocation geolocation = 8;
  if (this->has_geolocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->geolocation_, output);
  }

  // .external.client.Signal.Type type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // uint64 automation = 10;
  if (this->automation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->automation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:external.client.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:external.client.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 properties = 1;
  if (this->properties() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->properties(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // uint64 frequency = 3;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->frequency(), target);
  }

  // uint32 bandwidth = 4;
  if (this->bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bandwidth(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // uint64 duration = 6;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->duration(), target);
  }

  // float power = 7;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->power(), target);
  }

  // .external.client.Signal.Geolocation geolocation = 8;
  if (this->has_geolocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->geolocation_, deterministic, target);
  }

  // .external.client.Signal.Type type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // uint64 automation = 10;
  if (this->automation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->automation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:external.client.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:external.client.Signal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .external.client.Signal.Geolocation geolocation = 8;
  if (this->has_geolocation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->geolocation_);
  }

  // uint64 properties = 1;
  if (this->properties() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->properties());
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 frequency = 3;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frequency());
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 bandwidth = 4;
  if (this->bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bandwidth());
  }

  // float power = 7;
  if (this->power() != 0) {
    total_size += 1 + 4;
  }

  // uint64 duration = 6;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->duration());
  }

  // uint64 automation = 10;
  if (this->automation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->automation());
  }

  // .external.client.Signal.Type type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:external.client.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:external.client.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:external.client.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:external.client.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geolocation()) {
    mutable_geolocation()->::external::client::Signal_Geolocation::MergeFrom(from.geolocation());
  }
  if (from.properties() != 0) {
    set_properties(from.properties());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.bandwidth() != 0) {
    set_bandwidth(from.bandwidth());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.automation() != 0) {
    set_automation(from.automation());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:external.client.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:external.client.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  swap(geolocation_, other->geolocation_);
  swap(properties_, other->properties_);
  swap(id_, other->id_);
  swap(frequency_, other->frequency_);
  swap(timestamp_, other->timestamp_);
  swap(bandwidth_, other->bandwidth_);
  swap(power_, other->power_);
  swap(duration_, other->duration_);
  swap(automation_, other->automation_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_client_5fmsg_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5fmsg_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// uint64 properties = 1;
void Signal::clear_properties() {
  properties_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Signal::properties() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.properties)
  return properties_;
}
void Signal::set_properties(::google::protobuf::uint64 value) {
  
  properties_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.properties)
}

// uint64 id = 2;
void Signal::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Signal::id() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.id)
  return id_;
}
void Signal::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.id)
}

// uint64 frequency = 3;
void Signal::clear_frequency() {
  frequency_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Signal::frequency() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.frequency)
  return frequency_;
}
void Signal::set_frequency(::google::protobuf::uint64 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.frequency)
}

// uint32 bandwidth = 4;
void Signal::clear_bandwidth() {
  bandwidth_ = 0u;
}
::google::protobuf::uint32 Signal::bandwidth() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.bandwidth)
  return bandwidth_;
}
void Signal::set_bandwidth(::google::protobuf::uint32 value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.bandwidth)
}

// uint64 timestamp = 5;
void Signal::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Signal::timestamp() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.timestamp)
  return timestamp_;
}
void Signal::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.timestamp)
}

// uint64 duration = 6;
void Signal::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Signal::duration() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.duration)
  return duration_;
}
void Signal::set_duration(::google::protobuf::uint64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.duration)
}

// float power = 7;
void Signal::clear_power() {
  power_ = 0;
}
float Signal::power() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.power)
  return power_;
}
void Signal::set_power(float value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.power)
}

// .external.client.Signal.Geolocation geolocation = 8;
bool Signal::has_geolocation() const {
  return this != internal_default_instance() && geolocation_ != NULL;
}
void Signal::clear_geolocation() {
  if (GetArenaNoVirtual() == NULL && geolocation_ != NULL) delete geolocation_;
  geolocation_ = NULL;
}
const ::external::client::Signal_Geolocation& Signal::geolocation() const {
  const ::external::client::Signal_Geolocation* p = geolocation_;
  // @@protoc_insertion_point(field_get:external.client.Signal.geolocation)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Signal_Geolocation*>(
      &::external::client::_Signal_Geolocation_default_instance_);
}
::external::client::Signal_Geolocation* Signal::mutable_geolocation() {
  
  if (geolocation_ == NULL) {
    geolocation_ = new ::external::client::Signal_Geolocation;
  }
  // @@protoc_insertion_point(field_mutable:external.client.Signal.geolocation)
  return geolocation_;
}
::external::client::Signal_Geolocation* Signal::release_geolocation() {
  // @@protoc_insertion_point(field_release:external.client.Signal.geolocation)
  
  ::external::client::Signal_Geolocation* temp = geolocation_;
  geolocation_ = NULL;
  return temp;
}
void Signal::set_allocated_geolocation(::external::client::Signal_Geolocation* geolocation) {
  delete geolocation_;
  geolocation_ = geolocation;
  if (geolocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.Signal.geolocation)
}

// .external.client.Signal.Type type = 9;
void Signal::clear_type() {
  type_ = 0;
}
::external::client::Signal_Type Signal::type() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.type)
  return static_cast< ::external::client::Signal_Type >(type_);
}
void Signal::set_type(::external::client::Signal_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.type)
}

// uint64 automation = 10;
void Signal::clear_automation() {
  automation_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Signal::automation() const {
  // @@protoc_insertion_point(field_get:external.client.Signal.automation)
  return automation_;
}
void Signal::set_automation(::google::protobuf::uint64 value) {
  
  automation_ = value;
  // @@protoc_insertion_point(field_set:external.client.Signal.automation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace external

// @@protoc_insertion_point(global_scope)

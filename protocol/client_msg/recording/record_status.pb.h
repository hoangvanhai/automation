// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_msg/recording/record_status.proto

#ifndef PROTOBUF_client_5fmsg_2frecording_2frecord_5fstatus_2eproto__INCLUDED
#define PROTOBUF_client_5fmsg_2frecording_2frecord_5fstatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client_msg/common.pb.h"
// @@protoc_insertion_point(includes)
namespace external {
namespace client {
namespace recording {
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace recording
}  // namespace client
}  // namespace external

namespace external {
namespace client {
namespace recording {

namespace protobuf_client_5fmsg_2frecording_2frecord_5fstatus_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_client_5fmsg_2frecording_2frecord_5fstatus_2eproto

enum Status_State {
  Status_State_RECORDING = 0,
  Status_State_DONE = 1,
  Status_State_Status_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_State_Status_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_State_IsValid(int value);
const Status_State Status_State_State_MIN = Status_State_RECORDING;
const Status_State Status_State_State_MAX = Status_State_DONE;
const int Status_State_State_ARRAYSIZE = Status_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_State_descriptor();
inline const ::std::string& Status_State_Name(Status_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_State_descriptor(), value);
}
inline bool Status_State_Parse(
    const ::std::string& name, Status_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_State>(
    Status_State_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:external.client.recording.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Status_State State;
  static const State RECORDING =
    Status_State_RECORDING;
  static const State DONE =
    Status_State_DONE;
  static inline bool State_IsValid(int value) {
    return Status_State_IsValid(value);
  }
  static const State State_MIN =
    Status_State_State_MIN;
  static const State State_MAX =
    Status_State_State_MAX;
  static const int State_ARRAYSIZE =
    Status_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Status_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Status_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Status_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .external.client.Signal signal = 1;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 1;
  const ::external::client::Signal& signal() const;
  ::external::client::Signal* mutable_signal();
  ::external::client::Signal* release_signal();
  void set_allocated_signal(::external::client::Signal* signal);

  // .external.client.Error error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::external::client::Error& error() const;
  ::external::client::Error* mutable_error();
  ::external::client::Error* release_error();
  void set_allocated_error(::external::client::Error* error);

  // .external.client.recording.Status.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::external::client::recording::Status_State state() const;
  void set_state(::external::client::recording::Status_State value);

  // float percent = 3;
  void clear_percent();
  static const int kPercentFieldNumber = 3;
  float percent() const;
  void set_percent(float value);

  // @@protoc_insertion_point(class_scope:external.client.recording.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::external::client::Signal* signal_;
  ::external::client::Error* error_;
  int state_;
  float percent_;
  mutable int _cached_size_;
  friend struct protobuf_client_5fmsg_2frecording_2frecord_5fstatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// .external.client.Signal signal = 1;
inline bool Status::has_signal() const {
  return this != internal_default_instance() && signal_ != NULL;
}
inline void Status::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
inline const ::external::client::Signal& Status::signal() const {
  const ::external::client::Signal* p = signal_;
  // @@protoc_insertion_point(field_get:external.client.recording.Status.signal)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Signal*>(
      &::external::client::_Signal_default_instance_);
}
inline ::external::client::Signal* Status::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::external::client::Signal;
  }
  // @@protoc_insertion_point(field_mutable:external.client.recording.Status.signal)
  return signal_;
}
inline ::external::client::Signal* Status::release_signal() {
  // @@protoc_insertion_point(field_release:external.client.recording.Status.signal)
  
  ::external::client::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void Status::set_allocated_signal(::external::client::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.recording.Status.signal)
}

// .external.client.recording.Status.State state = 2;
inline void Status::clear_state() {
  state_ = 0;
}
inline ::external::client::recording::Status_State Status::state() const {
  // @@protoc_insertion_point(field_get:external.client.recording.Status.state)
  return static_cast< ::external::client::recording::Status_State >(state_);
}
inline void Status::set_state(::external::client::recording::Status_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:external.client.recording.Status.state)
}

// float percent = 3;
inline void Status::clear_percent() {
  percent_ = 0;
}
inline float Status::percent() const {
  // @@protoc_insertion_point(field_get:external.client.recording.Status.percent)
  return percent_;
}
inline void Status::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:external.client.recording.Status.percent)
}

// .external.client.Error error = 4;
inline bool Status::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void Status::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::external::client::Error& Status::error() const {
  const ::external::client::Error* p = error_;
  // @@protoc_insertion_point(field_get:external.client.recording.Status.error)
  return p != NULL ? *p : *reinterpret_cast<const ::external::client::Error*>(
      &::external::client::_Error_default_instance_);
}
inline ::external::client::Error* Status::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::external::client::Error;
  }
  // @@protoc_insertion_point(field_mutable:external.client.recording.Status.error)
  return error_;
}
inline ::external::client::Error* Status::release_error() {
  // @@protoc_insertion_point(field_release:external.client.recording.Status.error)
  
  ::external::client::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Status::set_allocated_error(::external::client::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:external.client.recording.Status.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace recording
}  // namespace client
}  // namespace external

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::external::client::recording::Status_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::external::client::recording::Status_State>() {
  return ::external::client::recording::Status_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5fmsg_2frecording_2frecord_5fstatus_2eproto__INCLUDED
